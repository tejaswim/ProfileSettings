/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.profilesettings.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.profilesettings.sales.Productcatalog;

/**
 * Service object for domain model class Productcatalog.
 *
 * @see {@link Productcatalog}
 */
public interface ProductcatalogService {

    /**
     * Creates a new Productcatalog.
     *
     * @param productcatalog The information of the created CompositeTable.
     * @return The created Productcatalog.
     */
	Productcatalog create(Productcatalog productcatalog);


	/**
	 * Finds Productcatalog by id.
	 *
	 * @param productcatalogId The id of the wanted Productcatalog.
	 * @return The found Productcatalog. If no Productcatalog is found, this method returns null.
	 */
	Productcatalog getById(Integer productcatalogId) throws EntityNotFoundException;


	/**
	 * Updates the information of a Productcatalog.
	 *
	 * @param productcatalog The information of the updated Productcatalog.
	 * @return The updated Productcatalog.
     *
	 * @throws EntityNotFoundException if no Productcatalog is found with given id.
	 */
	Productcatalog update(Productcatalog productcatalog) throws EntityNotFoundException;

    /**
	 * Deletes a Productcatalog.
	 *
	 * @param productcatalogId The id of the deleted Productcatalog.
	 * @return The deleted Productcatalog.
     *
	 * @throws EntityNotFoundException if no Productcatalog is found with the given id.
	 */
	Productcatalog delete(Integer productcatalogId) throws EntityNotFoundException;

	/**
	 * Finds all Productcatalogs.
	 *
	 * @return A list of Productcatalogs.
	 */
    @Deprecated
	Page<Productcatalog> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Productcatalogs.
	 * @return A list of Productcatalogs.
	 */
    Page<Productcatalog> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Productcatalogs in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Productcatalog.
	 */
	long count(String query);


}

