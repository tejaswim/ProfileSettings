/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.profilesettings.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.profilesettings.sales.Client;

/**
 * Service object for domain model class Client.
 *
 * @see {@link Client}
 */
public interface ClientService {

    /**
     * Creates a new Client.
     *
     * @param client The information of the created CompositeTable.
     * @return The created Client.
     */
	Client create(Client client);


	/**
	 * Finds Client by id.
	 *
	 * @param clientId The id of the wanted Client.
	 * @return The found Client. If no Client is found, this method returns null.
	 */
	Client getById(Integer clientId) throws EntityNotFoundException;


	/**
	 * Updates the information of a Client.
	 *
	 * @param client The information of the updated Client.
	 * @return The updated Client.
     *
	 * @throws EntityNotFoundException if no Client is found with given id.
	 */
	Client update(Client client) throws EntityNotFoundException;

    /**
	 * Deletes a Client.
	 *
	 * @param clientId The id of the deleted Client.
	 * @return The deleted Client.
     *
	 * @throws EntityNotFoundException if no Client is found with the given id.
	 */
	Client delete(Integer clientId) throws EntityNotFoundException;

	/**
	 * Finds all Clients.
	 *
	 * @return A list of Clients.
	 */
    @Deprecated
	Page<Client> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Clients.
	 * @return A list of Clients.
	 */
    Page<Client> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Clients in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Client.
	 */
	long count(String query);


}

