/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.profilesettings.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.profilesettings.sales.Year;

/**
 * Service object for domain model class Year.
 *
 * @see {@link Year}
 */
public interface YearService {

    /**
     * Creates a new Year.
     *
     * @param year The information of the created CompositeTable.
     * @return The created Year.
     */
	Year create(Year year);


	/**
	 * Finds Year by id.
	 *
	 * @param yearId The id of the wanted Year.
	 * @return The found Year. If no Year is found, this method returns null.
	 */
	Year getById(Integer yearId) throws EntityNotFoundException;


	/**
	 * Updates the information of a Year.
	 *
	 * @param year The information of the updated Year.
	 * @return The updated Year.
     *
	 * @throws EntityNotFoundException if no Year is found with given id.
	 */
	Year update(Year year) throws EntityNotFoundException;

    /**
	 * Deletes a Year.
	 *
	 * @param yearId The id of the deleted Year.
	 * @return The deleted Year.
     *
	 * @throws EntityNotFoundException if no Year is found with the given id.
	 */
	Year delete(Integer yearId) throws EntityNotFoundException;

	/**
	 * Finds all Years.
	 *
	 * @return A list of Years.
	 */
    @Deprecated
	Page<Year> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Years.
	 * @return A list of Years.
	 */
    Page<Year> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Years in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Year.
	 */
	long count(String query);


}

