/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.profilesettings.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.profilesettings.sales.AccountManager;

/**
 * Service object for domain model class AccountManager.
 *
 * @see {@link AccountManager}
 */
public interface AccountManagerService {

    /**
     * Creates a new AccountManager.
     *
     * @param accountManager The information of the created CompositeTable.
     * @return The created AccountManager.
     */
	AccountManager create(AccountManager accountManager);


	/**
	 * Finds AccountManager by id.
	 *
	 * @param accountManagerId The id of the wanted AccountManager.
	 * @return The found AccountManager. If no AccountManager is found, this method returns null.
	 */
	AccountManager getById(Integer accountManagerId) throws EntityNotFoundException;


	/**
	 * Updates the information of a AccountManager.
	 *
	 * @param accountManager The information of the updated AccountManager.
	 * @return The updated AccountManager.
     *
	 * @throws EntityNotFoundException if no AccountManager is found with given id.
	 */
	AccountManager update(AccountManager accountManager) throws EntityNotFoundException;

    /**
	 * Deletes a AccountManager.
	 *
	 * @param accountManagerId The id of the deleted AccountManager.
	 * @return The deleted AccountManager.
     *
	 * @throws EntityNotFoundException if no AccountManager is found with the given id.
	 */
	AccountManager delete(Integer accountManagerId) throws EntityNotFoundException;

	/**
	 * Finds all AccountManagers.
	 *
	 * @return A list of AccountManagers.
	 */
    @Deprecated
	Page<AccountManager> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all AccountManagers.
	 * @return A list of AccountManagers.
	 */
    Page<AccountManager> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AccountManagers in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the AccountManager.
	 */
	long count(String query);


}

