/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.profilesettings.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.profilesettings.sales.VenueDetail;

/**
 * Service object for domain model class VenueDetail.
 *
 * @see {@link VenueDetail}
 */
public interface VenueDetailService {

    /**
     * Creates a new VenueDetail.
     *
     * @param venueDetail The information of the created CompositeTable.
     * @return The created VenueDetail.
     */
	VenueDetail create(VenueDetail venueDetail);


	/**
	 * Finds VenueDetail by id.
	 *
	 * @param venueDetailId The id of the wanted VenueDetail.
	 * @return The found VenueDetail. If no VenueDetail is found, this method returns null.
	 */
	VenueDetail getById(Integer venueDetailId) throws EntityNotFoundException;


	/**
	 * Updates the information of a VenueDetail.
	 *
	 * @param venueDetail The information of the updated VenueDetail.
	 * @return The updated VenueDetail.
     *
	 * @throws EntityNotFoundException if no VenueDetail is found with given id.
	 */
	VenueDetail update(VenueDetail venueDetail) throws EntityNotFoundException;

    /**
	 * Deletes a VenueDetail.
	 *
	 * @param venueDetailId The id of the deleted VenueDetail.
	 * @return The deleted VenueDetail.
     *
	 * @throws EntityNotFoundException if no VenueDetail is found with the given id.
	 */
	VenueDetail delete(Integer venueDetailId) throws EntityNotFoundException;

	/**
	 * Finds all VenueDetails.
	 *
	 * @return A list of VenueDetails.
	 */
    @Deprecated
	Page<VenueDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all VenueDetails.
	 * @return A list of VenueDetails.
	 */
    Page<VenueDetail> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the VenueDetails in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the VenueDetail.
	 */
	long count(String query);


}

