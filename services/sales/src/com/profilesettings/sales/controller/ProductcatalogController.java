/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.profilesettings.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.profilesettings.sales.Productcatalog;
import com.profilesettings.sales.service.ProductcatalogService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Productcatalog.
 * @see Productcatalog
 */
@RestController("sales.ProductcatalogController")
@RequestMapping("/sales/Productcatalog")
@Api(description = "Exposes APIs to work with Productcatalog resource.", value = "ProductcatalogController")
public class ProductcatalogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductcatalogController.class);

    @Autowired
    @Qualifier("sales.ProductcatalogService")
    private ProductcatalogService productcatalogService;

    /**
     * @deprecated Use {@link #findProductcatalogs(String, Pageable)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Productcatalog instances matching the search criteria.")
    public Page<Productcatalog> findProductcatalogs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Productcatalogs list");
        return productcatalogService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Productcatalog instances matching the search criteria.")
    public Page<Productcatalog> findProductcatalogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Productcatalogs list");
        return productcatalogService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportProductcatalogs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return productcatalogService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductcatalogService instance
	 */
    protected void setProductcatalogService(ProductcatalogService service) {
        this.productcatalogService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Productcatalog instance.")
    public Productcatalog createProductcatalog(@RequestBody Productcatalog productcatalog) {
        LOGGER.debug("Create Productcatalog with information: {}", productcatalog);
        productcatalog = productcatalogService.create(productcatalog);
        LOGGER.debug("Created Productcatalog with information: {}", productcatalog);
        return productcatalog;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Productcatalog instances.")
    public Long countProductcatalogs(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query) {
        LOGGER.debug("counting Productcatalogs");
        return productcatalogService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Productcatalog instance associated with the given id.")
    public Productcatalog getProductcatalog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Productcatalog with id: {}", id);
        Productcatalog foundProductcatalog = productcatalogService.getById(id);
        LOGGER.debug("Productcatalog details with id: {}", foundProductcatalog);
        return foundProductcatalog;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Productcatalog instance associated with the given id.")
    public Productcatalog editProductcatalog(@PathVariable(value = "id") Integer id, @RequestBody Productcatalog productcatalog) throws EntityNotFoundException {
        LOGGER.debug("Editing Productcatalog with id: {}", productcatalog.getProductId());
        productcatalog.setProductId(id);
        productcatalog = productcatalogService.update(productcatalog);
        LOGGER.debug("Productcatalog details with id: {}", productcatalog);
        return productcatalog;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Productcatalog instance associated with the given id.")
    public boolean deleteProductcatalog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Productcatalog with id: {}", id);
        Productcatalog deletedProductcatalog = productcatalogService.delete(id);
        return deletedProductcatalog != null;
    }
}
