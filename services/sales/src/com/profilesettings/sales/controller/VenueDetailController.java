/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.profilesettings.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.profilesettings.sales.VenueDetail;
import com.profilesettings.sales.service.VenueDetailService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class VenueDetail.
 * @see VenueDetail
 */
@RestController("sales.VenueDetailController")
@RequestMapping("/sales/VenueDetail")
@Api(description = "Exposes APIs to work with VenueDetail resource.", value = "VenueDetailController")
public class VenueDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VenueDetailController.class);

    @Autowired
    @Qualifier("sales.VenueDetailService")
    private VenueDetailService venueDetailService;

    /**
     * @deprecated Use {@link #findVenueDetails(String, Pageable)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of VenueDetail instances matching the search criteria.")
    public Page<VenueDetail> findVenueDetails(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VenueDetails list");
        return venueDetailService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of VenueDetail instances matching the search criteria.")
    public Page<VenueDetail> findVenueDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VenueDetails list");
        return venueDetailService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportVenueDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return venueDetailService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VenueDetailService instance
	 */
    protected void setVenueDetailService(VenueDetailService service) {
        this.venueDetailService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new VenueDetail instance.")
    public VenueDetail createVenueDetail(@RequestBody VenueDetail venuedetail) {
        LOGGER.debug("Create VenueDetail with information: {}", venuedetail);
        venuedetail = venueDetailService.create(venuedetail);
        LOGGER.debug("Created VenueDetail with information: {}", venuedetail);
        return venuedetail;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of VenueDetail instances.")
    public Long countVenueDetails(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query) {
        LOGGER.debug("counting VenueDetails");
        return venueDetailService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the VenueDetail instance associated with the given id.")
    public VenueDetail getVenueDetail(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting VenueDetail with id: {}", id);
        VenueDetail foundVenueDetail = venueDetailService.getById(id);
        LOGGER.debug("VenueDetail details with id: {}", foundVenueDetail);
        return foundVenueDetail;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the VenueDetail instance associated with the given id.")
    public VenueDetail editVenueDetail(@PathVariable(value = "id") Integer id, @RequestBody VenueDetail venuedetail) throws EntityNotFoundException {
        LOGGER.debug("Editing VenueDetail with id: {}", venuedetail.getId());
        venuedetail.setId(id);
        venuedetail = venueDetailService.update(venuedetail);
        LOGGER.debug("VenueDetail details with id: {}", venuedetail);
        return venuedetail;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the VenueDetail instance associated with the given id.")
    public boolean deleteVenueDetail(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VenueDetail with id: {}", id);
        VenueDetail deletedVenueDetail = venueDetailService.delete(id);
        return deletedVenueDetail != null;
    }
}
